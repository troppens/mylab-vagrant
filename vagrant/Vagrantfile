###############################################################################
#
# Do not make any changes below this line
#
###############################################################################

###############################################################################
#
# Helper functions
#
###############################################################################

# True, if storage controller is configured for VM
def has_storagectl?(vm_name, controller_name)

  # Get all vms
  cmd = "VBoxManage list vms"
  out = `#{cmd}`

  # VMs are listed like this:
  # "master" {5183a36e-3d27-4501-b166-39e6fb87e852}
  pattern = "^\"#{vm_name}\" .*$"

  # Check if VM is defined
  if out.lines().any? { |line| /#{pattern}/ =~ line }
    #
    # VM is defined
    #

    # Get details of vm
    cmd = "VBoxManage showvminfo #{vm_name}"
    out = `#{cmd}`

    # Storage controller are reported like this:
    # "Storage Controller Name (1):            SATA"
    pattern = "^Storage Controller Name.*#{controller_name}$"

    # Return True, if output includes pattern
    return out.lines().any? { |line| /#{pattern}/ =~ line }

  else
    #
    # VM is not defined
    #

    # Undefined VMs do not have storage controller
    return false

  end  # if VM is defined

end  # def has_storagectl

###############################################################################
#
# Main program
#
###############################################################################

#
# Read nodes configuration
#

# Copy node configuration file from example configuration file, if not exists
if not(File.exists?("../config/nodes.yml"))
  puts "====> Node configuration file not found ('../config/nodes.yml')."
  puts "====> Copy it from example file ('../config/nodes.yml
  .smp')..."
  FileUtils.cp "../config/nodes.yml.smp", "../config/nodes.yml"
end # if

# Read node configuration file
file = File.read("../config/nodes.yml")
nodes = YAML.load(file)

#
# Generate RSA key for root ssh between VMs
#
require "openssl"
file_id_rsa_root = "../config/id_rsa_root"

# Generate RSA key for root, if not exists
if not(File.exists?(file_id_rsa_root))
  puts "====> RSA key for root not found ('#{file_id_rsa_root}')."
  puts "====> Generating RSA key for root..."

  # Generate new file with RSA key
  rsa_key_for_root = OpenSSL::PKey::RSA.new(2048)
  File.write(file_id_rsa_root, rsa_key_for_root)

end  # if

#
# Configure all VMs
#

Vagrant.configure("2") do |config|

  # Pin CentOS 8 version 1905.1 as OS
  config.vm.box = "centos/8"
  config.vm.box_version = "1905.1"

  # VirtualBox settings for all VMs
  config.vm.provider :virtualbox do |vb|

    # Add all cluster nodes to the same VirtualBox group
    vb.customize ["modifyvm", :id, "--groups", "/mylab"]

   # DNS Not Working
   # https://www.vagrantup.com/docs/virtualbox/common-issues.html#dns-not-working
   # https://serverfault.com/questions/453185/vagrant-virtualbox-dns-10-0-2-3-not-working
   vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]

  end  # Loop |vb|

  # Synchronize config directory to guests
  config.vm.synced_folder "../config/", "/config", type: "rsync"

  # Configure shared ssh key for root
  config.vm.provision "Configure root ssh between guests", type: "shell",
    inline: """
      chown root:root /config/id_rsa_root
      chmod 400 /config/id_rsa_root
      mkdir -m 700 /root/.ssh
      install -m 600 /config/id_rsa_root /root/.ssh/id_rsa
      ssh-keygen -y -f /root/.ssh/id_rsa > /root/.ssh/id_rsa.pub
      cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys
    """

  # Iterate over nunber of nodes
  (0..nodes.count-1).each do |node|
    # Define VM
    config.vm.define nodes[node]["name"] do |node_config|

      # Set hostname in guest OS
      node_config.vm.hostname = nodes[node]["name"]

      # Set IP address on shared cluster network
      node_config.vm.network "private_network", ip: nodes[node]["ip"],
        virtualbox__intnet: "mylab"

      # Virtualbox settings for current VM
      node_config.vm.provider :virtualbox do |vb|

        # Set VM name in VirtualBox
        vb.name = nodes[node]["name"]

        # Create and attach disks, if specified in node configuration file
        if nodes[node].key?("disks")
          # Configure SATA controller, unless it is already configured
          unless has_storagectl?(nodes[node]["name"], "SATA")
            vb.customize ['storagectl', :id,
              '--name', 'SATA',
              '--add', 'sata',
              '--hostiocache', 'off'
            ]
          end  # unless has_storagectl?
          # Iterate over all disks
          (0..nodes[node]["disks"].count-1).each do |disk|
            diskfile = "../disks/#{nodes[node]["name"]}_disk#{disk}.vdi"
            # Create disk file, if not exist
            unless File.exist?(diskfile)
              vb.customize ['createmedium',
                '--format', 'vdi',
                '--variant', 'fixed',
                '--filename', diskfile,
                '--size', nodes[node]["disks"][disk]["size"] * 1024
              ]
            end  # unless
            # Attach disk
            vb.customize ['storageattach', :id,
              '--storagectl', 'SATA',
              '--port', disk,
              '--device', 0,
              '--type', 'hdd',
              '--medium', diskfile
            ]
          end  # Loop |disk|
        end  # if

      end  # Loop |vb|

      # For node origin only: Synchronize software directory to guest
      if nodes[node]["name"] == "origin"
        node_config.vm.synced_folder "../software/", "/software", type: "rsync"
      end  # if

      # Run node specific provision script, if exists
      node_provision_script = "../config/provision_#{nodes[node]["name"]}.sh"
      if File.exists?(node_provision_script)
        node_config.vm.provision "Run node provision script (#{node_provision_script})",
          type: "shell", path: node_provision_script
      end  # if

    end  # Loop |node_config|

  end  # Loop |node|

end  # Loop |config|
